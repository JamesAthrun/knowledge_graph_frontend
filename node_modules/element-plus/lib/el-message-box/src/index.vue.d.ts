import type { ComponentPublicInstance, PropType, VNode } from 'vue';
import type { Action, MessageBoxState } from './message-box.type';
declare const _default: import("vue").DefineComponent<{
    beforeClose: {
        type: PropType<(action: Action, state: MessageBoxState, doClose: () => void) => any>;
        default: any;
    };
    callback: FunctionConstructor;
    cancelButtonText: {
        type: StringConstructor;
    };
    cancelButtonClass: StringConstructor;
    center: BooleanConstructor;
    closeOnClickModal: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnPressEscape: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnHashChange: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmButtonText: {
        type: StringConstructor;
    };
    confirmButtonClass: StringConstructor;
    container: {
        type: StringConstructor;
        default: string;
    };
    customClass: StringConstructor;
    dangerouslyUseHTMLString: BooleanConstructor;
    distinguishCancelAndClose: BooleanConstructor;
    iconClass: StringConstructor;
    inputPattern: {
        type: PropType<RegExp>;
        default: () => any;
        validator: (val: unknown) => boolean;
    };
    inputPlaceholder: {
        type: StringConstructor;
    };
    inputType: {
        type: StringConstructor;
        default: string;
    };
    inputValue: {
        type: StringConstructor;
    };
    inputValidator: {
        type: PropType<(...args: any[]) => boolean | string>;
        default: any;
    };
    inputErrorMessage: StringConstructor;
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    message: {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        validator: (val: unknown) => boolean;
    };
    modalFade: {
        type: BooleanConstructor;
        default: boolean;
    };
    modalClass: StringConstructor;
    modal: {
        type: BooleanConstructor;
        default: boolean;
    };
    roundButton: BooleanConstructor;
    showCancelButton: BooleanConstructor;
    showConfirmButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: StringConstructor;
    title: StringConstructor;
    showInput: BooleanConstructor;
    zIndex: NumberConstructor;
}, {
    state: {
        action: Action;
        inputValue: string;
        confirmButtonLoading: boolean;
        cancelButtonLoading: boolean;
        cancelButtonText: string;
        confirmButtonDisabled: boolean;
        confirmButtonText: string;
        editorErrorMessage: string;
        validateError: boolean;
        zIndex: number;
    };
    visible: import("vue").Ref<boolean>;
    hasMessage: import("vue").ComputedRef<boolean>;
    icon: import("vue").ComputedRef<string>;
    confirmButtonClasses: import("vue").ComputedRef<string>;
    inputRef: import("vue").Ref<ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
    confirmRef: import("vue").Ref<ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
    doClose: () => void;
    handleClose: () => void;
    handleWrapperClick: () => void;
    handleInputEnter: () => void;
    handleAction: (action: Action) => void;
    t: (...args: any[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("vanish" | "action")[], "vanish" | "action", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    beforeClose: (action: Action, state: MessageBoxState, doClose: () => void) => any;
    center: boolean;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    closeOnHashChange: boolean;
    container: string;
    dangerouslyUseHTMLString: boolean;
    distinguishCancelAndClose: boolean;
    inputPattern: RegExp;
    inputType: string;
    inputValidator: (...args: any[]) => boolean | string;
    lockScroll: boolean;
    modalFade: boolean;
    modal: boolean;
    roundButton: boolean;
    showCancelButton: boolean;
    showConfirmButton: boolean;
    showClose: boolean;
    showInput: boolean;
} & {
    callback?: Function;
    cancelButtonText?: string;
    cancelButtonClass?: string;
    confirmButtonText?: string;
    confirmButtonClass?: string;
    customClass?: string;
    iconClass?: string;
    inputPlaceholder?: string;
    inputValue?: string;
    inputErrorMessage?: string;
    message?: string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    modalClass?: string;
    type?: string;
    title?: string;
    zIndex?: number;
}>, {
    beforeClose: (action: Action, state: MessageBoxState, doClose: () => void) => any;
    center: boolean;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    closeOnHashChange: boolean;
    container: string;
    dangerouslyUseHTMLString: boolean;
    distinguishCancelAndClose: boolean;
    inputPattern: RegExp;
    inputType: string;
    inputValidator: (...args: any[]) => boolean | string;
    lockScroll: boolean;
    modalFade: boolean;
    modal: boolean;
    roundButton: boolean;
    showCancelButton: boolean;
    showConfirmButton: boolean;
    showClose: boolean;
    showInput: boolean;
}>;
export default _default;
